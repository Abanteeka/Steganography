Index: libs/vedio_steganography.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># VIDEO STEGANOGRAPHY OPERATIONS\r\n# 1. Encode the Text message\r\n# 2. Decode the Text message\r\n# 3. Exit\r\nimport cv2\r\n\r\n\r\ndef vedio_steganography(file):\r\n\r\n    def encryption(data):\r\n        return data\r\n\r\n    def msgtobinary(data):\r\n        return data\r\n\r\n    def embed(frame):\r\n        data = input(\"Enter the data to be Encoded in Video :\")\r\n        data = encryption(data)\r\n        print(\"The Encrypted data is:\", data)\r\n        if len(data) == 0:\r\n            raise ValueError(\"Data entered to be encoded is empty\")\r\n        data = data + '*^*^*'\r\n\r\n        binary_data = msgtobinary(data)\r\n        return frame\r\n\r\n    def Encode():\r\n        cap = cv2.VideoCapture(\"video.mp4\")\r\n        vidcap = cv2.VideoCapture(\"video.mp4\")\r\n        fourcc = cv2.VideoWriter_fourcc(*'XVID')\r\n        frame_width = int(vidcap.get(3))\r\n        frame_height = int(vidcap.get(4))\r\n\r\n        size = (frame_width, frame_height)\r\n        out = cv2.VideoWriter('stego.mp4', fourcc, 25.0, size)\r\n        max_frame = 0\r\n        while cap.isOpened():\r\n            ret, frame = cap.read()\r\n            if not ret:\r\n                break\r\n            max_frame = max_frame + 1\r\n        cap.release()\r\n        print(\"Total Number of Frame in Selected Video:\", max_frame)\r\n\r\n        n = int(input(\"Enter the frame number where you want to embed data:\"))\r\n        frame_number = 0\r\n        while vidcap.isOpened():\r\n            frame_number = frame_number + 1\r\n            ret, frame = vidcap.read()\r\n            if not ret:\r\n                break\r\n            if frame_number == n:\r\n                change_frame_with = embed(frame)\r\n                frame_ = change_frame_with\r\n                frame = change_frame_with\r\n            out.write(frame)\r\n        print(\"Encoded the data successfully in the video file\")\r\n        return frame_\r\n\r\n\r\n\r\n    def Decode():\r\n        pass\r\n\r\n    while True:\r\n        print(\"1.Encode\")\r\n        print(\"2.Decode\")\r\n        print(\"3.Exit\")\r\n        n = int(input(\"Enter Your choice:\"))\r\n        if n == 1:\r\n            Encode()\r\n        elif n == 2:\r\n            Decode()\r\n        elif n == 3:\r\n            break\r\n        else:\r\n            print(\"invalid Choice\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libs/vedio_steganography.py b/libs/vedio_steganography.py
--- a/libs/vedio_steganography.py	(revision 9f80841d5972a47afd5db91cd57a19614c156d5b)
+++ b/libs/vedio_steganography.py	(date 1669619325044)
@@ -5,8 +5,7 @@
 import cv2
 
 
-def vedio_steganography(file):
-
+def video_steganography(file):
     def encryption(data):
         return data
 
@@ -57,10 +56,15 @@
         print("Encoded the data successfully in the video file")
         return frame_
 
-
-
-    def Decode():
-        pass
+    def Decode(frame):
+        cap = cv2.VideoCapture('stego.mp4')
+        max_frame = 0;
+        while cap.isOpened():
+            ret, frame = cap.read()
+            if not ret:
+                break
+            max_frame += 1
+        print("Total number of Frame in selected ")
 
     while True:
         print("1.Encode")
@@ -74,4 +78,4 @@
         elif n == 3:
             break
         else:
-            print("invalid Choice")
\ No newline at end of file
+            print("invalid Choice")
Index: libs/text_steganography.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># TEXT STEGANOGRAPHY OPERATIONS\r\n# 1. Encode the Text message\r\n# 2. Decode the Text message\r\n# 3. Exit\r\nimport os\r\n\r\n\r\ndef text_steganography(file):\r\n    def EncodeTheText(text):\r\n        i = 0\r\n        add = ''\r\n        while i < len(text):\r\n            t = ord(text[i])\r\n            if 32 <= t <= 64:\r\n                t1 = t + 48\r\n                t2 = t1 ^ 170\r\n                res = bin(t2)[2:].zfill(8)\r\n                add = add + \"0011\" + res\r\n            else:\r\n                t1 = t - 48\r\n                t2 = t1 ^ 170\r\n                res = bin(t2)[2:].zfill(8)\r\n                add = add + \"0110\" + res\r\n            i = i + 1\r\n        res1 = add + \"111111111111\"\r\n        print(\"The String after binary conversion appling all the transformation:-{}\".format(res1))\r\n        print(\"Length of binary after Conersion:-{}\".format(len(res1)))\r\n        ZWC = {\"00\": u'\\u200C', \"01\": u'\\u202C', \"11\": u'\\u202D', \"10\": u'\\u200E'}\r\n        file1 = open(file, 'r+')\r\n        f = file.split(\"/\")\r\n        f[len(f)-1] = \"/temp.txt\"\r\n        aa = file.split(\"/\")\r\n        a = ''\r\n        for i in range(1, len(aa) - 1):\r\n            a = a + \"/\" + aa[i]\r\n        a = a + \"/\" + \"temp.txt\"\r\n        file3 = open(a, 'w+', encoding='utf-8')\r\n        word = []\r\n        for line in file1:\r\n            word = word + line.split()\r\n        ii = 0\r\n        while ii < len(res1):\r\n            s = word[int(ii/12)]\r\n            j = 0\r\n            w = \"\"\r\n            while j < 12:\r\n                x = res1[j+ii] + res1[ii+j+1]\r\n                w = w + ZWC[x]\r\n                j = j + 2\r\n            s1 = s + w\r\n            file3.write(s1)\r\n            file3.write(\" \")\r\n            ii = ii + 12\r\n        t = int(len(res1)/12)\r\n        while t < len(word):\r\n            file3.write(word[t])\r\n            file3.write(\" \")\r\n            t = t + 1\r\n        file3.close()\r\n        file1.close()\r\n        os.remove(file)\r\n        os.rename(a, file)\r\n        print(\"Stego file has successfully generated\")\r\n\r\n    def Encode():\r\n        count2 = 0\r\n        file1 = open(file, 'r')\r\n        for line in file1:\r\n            for word in line.split():\r\n                count2 = count2 + 1\r\n        file1.close()\r\n        bt = int(count2)\r\n        print(\"Maximum number of words that can be inserted:- {}\".format(int(bt/6)))\r\n        text1 = input(\"Enter data to be encoded:\")\r\n        if len(text1) > bt:\r\n            print(\"String is too big please reduce string size\")\r\n            Encode()\r\n        else:\r\n            EncodeTheText(text1)\r\n\r\n    def BinaryToDecimal(binary):\r\n        string = int(binary, 2)\r\n        return string\r\n\r\n    def Decode():\r\n        ZWC_reverse = {u\"\\u200C\": \"00\", u'\\u202C': \"01\", u'\\u202D': \"11\", u'\\u200E': \"10\"}\r\n        file4 = open(file, 'r', encoding=\"utf-8\")\r\n        temp = ''\r\n        for line in file4:\r\n            for word in line.split():\r\n                T1 = word\r\n                binary_extract = \"\"\r\n                for letters in T1:\r\n                    if letters in ZWC_reverse:\r\n                        binary_extract = binary_extract + ZWC_reverse[letters]\r\n                    if binary_extract == \"111111111111\":\r\n                        break\r\n                    else:\r\n                        temp = temp + binary_extract\r\n        print(\"Encrypted message presented in code bits: {}\".format(temp))\r\n        print(\"Length of encoded bits:- \".format(len(temp)))\r\n        i = 0\r\n        a = 0\r\n        b = 4\r\n        c = 4\r\n        d = 12\r\n        final = ''\r\n        while i < len(temp):\r\n            t3 = temp[a:b]\r\n            a = a + 12\r\n            b = b + 12\r\n            i = i + 12\r\n            t4 = temp[c:d]\r\n            c = c + 12\r\n            d = d + 12\r\n            if t3 == \"0110\":\r\n                for i in range(0, len(t4), 8):\r\n                    temp_data = t4[i:i + 8]\r\n                    decimal_data = BinaryToDecimal(temp_data)\r\n                    final = final + chr((decimal_data ^ 170) + 48)\r\n            elif t3 == \"0011\":\r\n                for i in range(0, len(t4), 8):\r\n                    temp_data = t4[i:i + 8]\r\n                    decimal_data = BinaryToDecimal(temp_data)\r\n                    final = final + chr((decimal_data ^ 170) - 48)\r\n        print(\"Message after decoding from the stego file:- {}\".format(final))\r\n\r\n    while True:\r\n        print(\"TEXT STEGANOGRAPHY OPERATIONS\")\r\n        print(\"1. Encode the Text message\")\r\n        print(\"2. Decode the Text message\")\r\n        print(\"3. Exit\")\r\n        n = int(input(\"Enter Your Choice: \"))\r\n        if n == 1:\r\n            Encode()\r\n        elif n == 2:\r\n            Decode()\r\n        elif n == 3:\r\n            break\r\n        else:\r\n            print(\"INVALID CHOICE\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/libs/text_steganography.py b/libs/text_steganography.py
--- a/libs/text_steganography.py	(revision 9f80841d5972a47afd5db91cd57a19614c156d5b)
+++ b/libs/text_steganography.py	(date 1669615601711)
@@ -138,4 +138,4 @@
         elif n == 3:
             break
         else:
-            print("INVALID CHOICE")
+            print("INVALID CHOICE")
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (Steganography)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 9f80841d5972a47afd5db91cd57a19614c156d5b)
+++ b/.idea/misc.xml	(date 1669615620897)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (Steganography)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
